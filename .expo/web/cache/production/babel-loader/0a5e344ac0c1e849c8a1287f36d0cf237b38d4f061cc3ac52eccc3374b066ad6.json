{"ast":null,"code":"import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _toConsumableArray from\"@babel/runtime/helpers/toConsumableArray\";function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable;})),t.push.apply(t,o);}return t;}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach(function(r){_defineProperty(e,r,t[r]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r));});}return e;}import{create}from'zustand';import AsyncStorage from'@react-native-async-storage/async-storage';export var useChinchonStore=create(function(set,get){return{jugadores:[{id:1,nombre:'Jugador 1',puntos:0},{id:2,nombre:'Jugador 2',puntos:0}],historial:[],limitePuntos:100,ganador:null,agregarJugador:function agregarJugador(){var _get=get(),jugadores=_get.jugadores;if(jugadores.length<6){var nuevoId=Math.max.apply(Math,_toConsumableArray(jugadores.map(function(j){return j.id;})))+1;var nuevoJugador={id:nuevoId,nombre:`Jugador ${nuevoId}`,puntos:0};set(function(state){return{jugadores:[].concat(_toConsumableArray(state.jugadores),[nuevoJugador])};});get().guardarEnStorage();}},eliminarJugador:function eliminarJugador(id){var _get2=get(),jugadores=_get2.jugadores;if(jugadores.length>2){set(function(state){return{jugadores:state.jugadores.filter(function(j){return j.id!==id;})};});get().guardarEnStorage();}},cambiarNombreJugador:function cambiarNombreJugador(id,nuevoNombre){set(function(state){return{jugadores:state.jugadores.map(function(j){return j.id===id?_objectSpread(_objectSpread({},j),{},{nombre:nuevoNombre}):j;})};});get().guardarEnStorage();},agregarPuntos:function agregarPuntos(id,puntos){var _get3=get(),ganador=_get3.ganador;if(ganador&&ganador.length>0)return;set(function(state){var nuevosJugadores=state.jugadores.map(function(j){return j.id===id?_objectSpread(_objectSpread({},j),{},{puntos:j.puntos+puntos}):j;});var historialActualizado=[].concat(_toConsumableArray(state.historial),[{tipo:'agregarPuntos',jugadorId:id,puntos:puntos}]);var alguienPerdio=nuevosJugadores.some(function(j){return j.puntos>state.limitePuntos;});var nuevoGanador=state.ganador;if(alguienPerdio&&!state.ganador){var lowestScore=Math.min.apply(Math,_toConsumableArray(nuevosJugadores.map(function(j){return j.puntos;})));var ganadores=nuevosJugadores.filter(function(j){return j.puntos===lowestScore;}).map(function(g){return _objectSpread(_objectSpread({},g),{},{chinchon:false});});nuevoGanador=ganadores;}return{jugadores:nuevosJugadores,historial:historialActualizado,ganador:nuevoGanador};});get().guardarEnStorage();},corte:function corte(id){var _get4=get(),ganador=_get4.ganador;if(ganador)return;set(function(state){var nuevosJugadores=state.jugadores.map(function(j){return j.id===id?_objectSpread(_objectSpread({},j),{},{puntos:Math.max(0,j.puntos-10)}):j;});var historialActualizado=[].concat(_toConsumableArray(state.historial),[{tipo:'corte',jugadorId:id}]);return{jugadores:nuevosJugadores,historial:historialActualizado};});get().guardarEnStorage();},chinchon:function chinchon(id){var _get5=get(),jugadores=_get5.jugadores,ganador=_get5.ganador;if(ganador&&ganador.length>0)return;var jugadorGanador=jugadores.find(function(j){return j.id===id;});if(jugadorGanador){set({ganador:[_objectSpread(_objectSpread({},jugadorGanador),{},{chinchon:true})]});get().guardarEnStorage();}},deshacerUltima:function deshacerUltima(){var _get6=get(),historial=_get6.historial,jugadores=_get6.jugadores;if(historial.length===0)return;var ultimaAccion=historial[historial.length-1];var nuevoHistorial=historial.slice(0,-1);if(ultimaAccion.tipo==='chinchon'){set({historial:nuevoHistorial,ganador:null});get().guardarEnStorage();return;}set(function(state){var nuevosJugadores=_toConsumableArray(state.jugadores);var index=nuevosJugadores.findIndex(function(j){return j.id===ultimaAccion.jugadorId;});if(index!==-1){if(ultimaAccion.tipo==='agregarPuntos'){nuevosJugadores[index]=_objectSpread(_objectSpread({},nuevosJugadores[index]),{},{puntos:nuevosJugadores[index].puntos-ultimaAccion.puntos});}else if(ultimaAccion.tipo==='corte'){nuevosJugadores[index]=_objectSpread(_objectSpread({},nuevosJugadores[index]),{},{puntos:nuevosJugadores[index].puntos+10});}}return{jugadores:nuevosJugadores,historial:nuevoHistorial,ganador:null};});get().guardarEnStorage();},reiniciarPartida:function reiniciarPartida(){console.log('reiniciarPartida called in store');set(function(state){return{jugadores:state.jugadores.map(function(j){return _objectSpread(_objectSpread({},j),{},{puntos:0});}),historial:[],ganador:null};});get().guardarEnStorage();console.log('reiniciarPartida completed');},cambiarLimite:function cambiarLimite(nuevoLimite){set({limitePuntos:nuevoLimite});get().guardarEnStorage();},verificarGanador:function verificarGanador(){},getJugadoresOrdenados:function getJugadoresOrdenados(){var _get7=get(),jugadores=_get7.jugadores;return _toConsumableArray(jugadores).sort(function(a,b){return a.puntos-b.puntos;});},guardarEnStorage:function(){var _guardarEnStorage=_asyncToGenerator(function*(){var state=get();try{yield AsyncStorage.setItem('chinchonState',JSON.stringify({jugadores:state.jugadores,historial:state.historial,limitePuntos:state.limitePuntos,ganador:state.ganador}));}catch(error){console.error('Error guardando estado de Chinchón:',error);}});function guardarEnStorage(){return _guardarEnStorage.apply(this,arguments);}return guardarEnStorage;}(),cargarDesdeStorage:function(){var _cargarDesdeStorage=_asyncToGenerator(function*(){try{var savedState=yield AsyncStorage.getItem('chinchonState');if(savedState){var parsedState=JSON.parse(savedState);if(parsedState.ganador&&!Array.isArray(parsedState.ganador)){parsedState.ganador=[parsedState.ganador];}set(parsedState);}}catch(error){console.error('Error cargando estado de Chinchón:',error);}});function cargarDesdeStorage(){return _cargarDesdeStorage.apply(this,arguments);}return cargarDesdeStorage;}()};});","map":{"version":3,"names":["create","AsyncStorage","useChinchonStore","set","get","jugadores","id","nombre","puntos","historial","limitePuntos","ganador","agregarJugador","_get","length","nuevoId","Math","max","apply","_toConsumableArray","map","j","nuevoJugador","state","concat","guardarEnStorage","eliminarJugador","_get2","filter","cambiarNombreJugador","nuevoNombre","_objectSpread","agregarPuntos","_get3","nuevosJugadores","historialActualizado","tipo","jugadorId","alguienPerdio","some","nuevoGanador","lowestScore","min","ganadores","g","chinchon","corte","_get4","_get5","jugadorGanador","find","deshacerUltima","_get6","ultimaAccion","nuevoHistorial","slice","index","findIndex","reiniciarPartida","console","log","cambiarLimite","nuevoLimite","verificarGanador","getJugadoresOrdenados","_get7","sort","a","b","_guardarEnStorage","_asyncToGenerator","setItem","JSON","stringify","error","arguments","cargarDesdeStorage","_cargarDesdeStorage","savedState","getItem","parsedState","parse","Array","isArray"],"sources":["C:/Users/facun/Desktop/counter/store/chinchonStore.js"],"sourcesContent":["import { create } from 'zustand';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nexport const useChinchonStore = create((set, get) => ({\n  // Estado del juego\n  jugadores: [\n    { id: 1, nombre: 'Jugador 1', puntos: 0 },\n    { id: 2, nombre: 'Jugador 2', puntos: 0 },\n  ],\n  historial: [],\n  limitePuntos: 100,\n  ganador: null,\n\n  // Acciones para jugadores\n  agregarJugador: () => {\n    const { jugadores } = get();\n    if (jugadores.length < 6) {\n      const nuevoId = Math.max(...jugadores.map(j => j.id)) + 1;\n      const nuevoJugador = {\n        id: nuevoId,\n        nombre: `Jugador ${nuevoId}`,\n        puntos: 0\n      };\n      \n      set(state => ({\n        jugadores: [...state.jugadores, nuevoJugador]\n      }));\n      get().guardarEnStorage();\n    }\n  },\n\n  eliminarJugador: (id) => {\n    const { jugadores } = get();\n    if (jugadores.length > 2) {\n      set(state => ({\n        jugadores: state.jugadores.filter(j => j.id !== id)\n      }));\n      get().guardarEnStorage();\n    }\n  },\n\n  cambiarNombreJugador: (id, nuevoNombre) => {\n    set(state => ({\n      jugadores: state.jugadores.map(j => \n        j.id === id ? { ...j, nombre: nuevoNombre } : j\n      )\n    }));\n    get().guardarEnStorage();\n  },\n\n  // Acciones de puntuación\n  agregarPuntos: (id, puntos) => {\n    const { ganador } = get();\n    if (ganador && ganador.length > 0) return;\n\n    set(state => {\n      const nuevosJugadores = state.jugadores.map(j =>\n        j.id === id ? { ...j, puntos: j.puntos + puntos } : j\n      );\n\n      const historialActualizado = [\n        ...state.historial, \n        { tipo: 'agregarPuntos', jugadorId: id, puntos: puntos }\n      ];\n      \n      const alguienPerdio = nuevosJugadores.some(j => j.puntos > state.limitePuntos);\n      let nuevoGanador = state.ganador;\n\n      if (alguienPerdio && !state.ganador) {\n        const lowestScore = Math.min(...nuevosJugadores.map(j => j.puntos));\n        const ganadores = nuevosJugadores\n          .filter(j => j.puntos === lowestScore)\n          .map(g => ({ ...g, chinchon: false }));\n        \n        nuevoGanador = ganadores;\n      }\n\n      return { \n        jugadores: nuevosJugadores,\n        historial: historialActualizado,\n        ganador: nuevoGanador \n      };\n    });\n\n    get().guardarEnStorage();\n  },\n\n  corte: (id) => {\n    const { ganador } = get();\n    if (ganador) return;\n\n    set(state => {\n      const nuevosJugadores = state.jugadores.map(j =>\n        j.id === id ? { ...j, puntos: Math.max(0, j.puntos - 10) } : j // Evitar puntos negativos\n      );\n\n      const historialActualizado = [\n        ...state.historial, \n        { tipo: 'corte', jugadorId: id }\n      ];\n\n      // No se verifica ganador en un corte, solo se actualizan puntos.\n      return { \n        jugadores: nuevosJugadores,\n        historial: historialActualizado \n      };\n    });\n\n    get().guardarEnStorage();\n  },\n\n  chinchon: (id) => {\n    const { jugadores, ganador } = get();\n    if (ganador && ganador.length > 0) return;\n\n    const jugadorGanador = jugadores.find(j => j.id === id);\n    if (jugadorGanador) {\n      set({ ganador: [{ ...jugadorGanador, chinchon: true }] });\n      get().guardarEnStorage();\n    }\n  },\n\n  deshacerUltima: () => {\n    const { historial, jugadores } = get();\n    if (historial.length === 0) return;\n\n    const ultimaAccion = historial[historial.length - 1];\n    const nuevoHistorial = historial.slice(0, -1);\n\n    if (ultimaAccion.tipo === 'chinchon') {\n      set({ historial: nuevoHistorial, ganador: null });\n      get().guardarEnStorage();\n      return; \n    }\n\n    set(state => {\n      const nuevosJugadores = [...state.jugadores];\n      const index = nuevosJugadores.findIndex(j => j.id === ultimaAccion.jugadorId);\n\n      if (index !== -1) {\n        if (ultimaAccion.tipo === 'agregarPuntos') {\n          nuevosJugadores[index] = {\n            ...nuevosJugadores[index],\n            puntos: nuevosJugadores[index].puntos - ultimaAccion.puntos,\n          };\n        } else if (ultimaAccion.tipo === 'corte') {\n          nuevosJugadores[index] = {\n            ...nuevosJugadores[index],\n            puntos: nuevosJugadores[index].puntos + 10,\n          };\n        }\n      }\n      \n      return { \n        jugadores: nuevosJugadores, \n        historial: nuevoHistorial, \n        ganador: null \n      };\n    });\n\n    get().guardarEnStorage();\n  },\n\n  reiniciarPartida: () => {\n    console.log('reiniciarPartida called in store');\n    set(state => ({\n      jugadores: state.jugadores.map(j => ({ ...j, puntos: 0 })),\n      historial: [],\n      ganador: null\n    }));\n    get().guardarEnStorage();\n    console.log('reiniciarPartida completed');\n  },\n\n  cambiarLimite: (nuevoLimite) => {\n    set({ limitePuntos: nuevoLimite });\n    get().guardarEnStorage();\n  },\n\n  // Verificar ganador (YA NO SE USA DIRECTAMENTE, la lógica se movió)\n  verificarGanador: () => {\n    // Esta función ahora está vacía o puede ser eliminada,\n    // ya que su lógica se ha integrado en agregarPuntos.\n  },\n\n  // Obtener jugadores ordenados por puntos (menor a mayor)\n  getJugadoresOrdenados: () => {\n    const { jugadores } = get();\n    return [...jugadores].sort((a, b) => a.puntos - b.puntos);\n  },\n\n  // Persistencia\n  guardarEnStorage: async () => {\n    const state = get();\n    try {\n      await AsyncStorage.setItem('chinchonState', JSON.stringify({\n        jugadores: state.jugadores,\n        historial: state.historial,\n        limitePuntos: state.limitePuntos,\n        ganador: state.ganador\n      }));\n    } catch (error) {\n      console.error('Error guardando estado de Chinchón:', error);\n    }\n  },\n\n  cargarDesdeStorage: async () => {\n    try {\n      const savedState = await AsyncStorage.getItem('chinchonState');\n      if (savedState) {\n        const parsedState = JSON.parse(savedState);\n        \n        // Migración para el estado de 'ganador'\n        if (parsedState.ganador && !Array.isArray(parsedState.ganador)) {\n          // Si 'ganador' existe pero no es un array, es el formato antiguo.\n          // Lo convertimos a un array para que sea compatible.\n          parsedState.ganador = [parsedState.ganador];\n        }\n\n        set(parsedState);\n      }\n    } catch (error) {\n      console.error('Error cargando estado de Chinchón:', error);\n    }\n  }\n})); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}