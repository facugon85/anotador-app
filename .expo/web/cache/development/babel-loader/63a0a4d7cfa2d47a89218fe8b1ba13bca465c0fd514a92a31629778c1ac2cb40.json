{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { create } from 'zustand';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nexport var useChinchonStore = create(function (set, get) {\n  return {\n    jugadores: [{\n      id: 1,\n      nombre: 'Jugador 1',\n      puntos: 0\n    }, {\n      id: 2,\n      nombre: 'Jugador 2',\n      puntos: 0\n    }],\n    historial: [],\n    limitePuntos: 100,\n    ganador: null,\n    agregarJugador: function agregarJugador() {\n      var _get = get(),\n        jugadores = _get.jugadores;\n      if (jugadores.length < 6) {\n        var nuevoId = Math.max.apply(Math, _toConsumableArray(jugadores.map(function (j) {\n          return j.id;\n        }))) + 1;\n        var nuevoJugador = {\n          id: nuevoId,\n          nombre: `Jugador ${nuevoId}`,\n          puntos: 0\n        };\n        set(function (state) {\n          return {\n            jugadores: [].concat(_toConsumableArray(state.jugadores), [nuevoJugador])\n          };\n        });\n        get().guardarEnStorage();\n      }\n    },\n    eliminarJugador: function eliminarJugador(id) {\n      var _get2 = get(),\n        jugadores = _get2.jugadores;\n      if (jugadores.length > 2) {\n        set(function (state) {\n          return {\n            jugadores: state.jugadores.filter(function (j) {\n              return j.id !== id;\n            })\n          };\n        });\n        get().guardarEnStorage();\n      }\n    },\n    cambiarNombreJugador: function cambiarNombreJugador(id, nuevoNombre) {\n      set(function (state) {\n        return {\n          jugadores: state.jugadores.map(function (j) {\n            return j.id === id ? _objectSpread(_objectSpread({}, j), {}, {\n              nombre: nuevoNombre\n            }) : j;\n          })\n        };\n      });\n      get().guardarEnStorage();\n    },\n    agregarPuntos: function agregarPuntos(id, puntos) {\n      var _get3 = get(),\n        ganador = _get3.ganador;\n      if (ganador && ganador.length > 0) return;\n      set(function (state) {\n        var nuevosJugadores = state.jugadores.map(function (j) {\n          return j.id === id ? _objectSpread(_objectSpread({}, j), {}, {\n            puntos: j.puntos + puntos\n          }) : j;\n        });\n        var historialActualizado = [].concat(_toConsumableArray(state.historial), [{\n          tipo: 'agregarPuntos',\n          jugadorId: id,\n          puntos: puntos\n        }]);\n        var alguienPerdio = nuevosJugadores.some(function (j) {\n          return j.puntos > state.limitePuntos;\n        });\n        var nuevoGanador = state.ganador;\n        if (alguienPerdio && !state.ganador) {\n          var lowestScore = Math.min.apply(Math, _toConsumableArray(nuevosJugadores.map(function (j) {\n            return j.puntos;\n          })));\n          var ganadores = nuevosJugadores.filter(function (j) {\n            return j.puntos === lowestScore;\n          }).map(function (g) {\n            return _objectSpread(_objectSpread({}, g), {}, {\n              chinchon: false\n            });\n          });\n          nuevoGanador = ganadores;\n        }\n        return {\n          jugadores: nuevosJugadores,\n          historial: historialActualizado,\n          ganador: nuevoGanador\n        };\n      });\n      get().guardarEnStorage();\n    },\n    corte: function corte(id) {\n      var _get4 = get(),\n        ganador = _get4.ganador;\n      if (ganador) return;\n      set(function (state) {\n        var nuevosJugadores = state.jugadores.map(function (j) {\n          return j.id === id ? _objectSpread(_objectSpread({}, j), {}, {\n            puntos: Math.max(0, j.puntos - 10)\n          }) : j;\n        });\n        var historialActualizado = [].concat(_toConsumableArray(state.historial), [{\n          tipo: 'corte',\n          jugadorId: id\n        }]);\n        return {\n          jugadores: nuevosJugadores,\n          historial: historialActualizado\n        };\n      });\n      get().guardarEnStorage();\n    },\n    chinchon: function chinchon(id) {\n      var _get5 = get(),\n        jugadores = _get5.jugadores,\n        ganador = _get5.ganador;\n      if (ganador && ganador.length > 0) return;\n      var jugadorGanador = jugadores.find(function (j) {\n        return j.id === id;\n      });\n      if (jugadorGanador) {\n        set({\n          ganador: [_objectSpread(_objectSpread({}, jugadorGanador), {}, {\n            chinchon: true\n          })]\n        });\n        get().guardarEnStorage();\n      }\n    },\n    deshacerUltima: function deshacerUltima() {\n      var _get6 = get(),\n        historial = _get6.historial,\n        jugadores = _get6.jugadores;\n      if (historial.length === 0) return;\n      var ultimaAccion = historial[historial.length - 1];\n      var nuevoHistorial = historial.slice(0, -1);\n      if (ultimaAccion.tipo === 'chinchon') {\n        set({\n          historial: nuevoHistorial,\n          ganador: null\n        });\n        get().guardarEnStorage();\n        return;\n      }\n      set(function (state) {\n        var nuevosJugadores = _toConsumableArray(state.jugadores);\n        var index = nuevosJugadores.findIndex(function (j) {\n          return j.id === ultimaAccion.jugadorId;\n        });\n        if (index !== -1) {\n          if (ultimaAccion.tipo === 'agregarPuntos') {\n            nuevosJugadores[index] = _objectSpread(_objectSpread({}, nuevosJugadores[index]), {}, {\n              puntos: nuevosJugadores[index].puntos - ultimaAccion.puntos\n            });\n          } else if (ultimaAccion.tipo === 'corte') {\n            nuevosJugadores[index] = _objectSpread(_objectSpread({}, nuevosJugadores[index]), {}, {\n              puntos: nuevosJugadores[index].puntos + 10\n            });\n          }\n        }\n        return {\n          jugadores: nuevosJugadores,\n          historial: nuevoHistorial,\n          ganador: null\n        };\n      });\n      get().guardarEnStorage();\n    },\n    reiniciarPartida: function reiniciarPartida() {\n      set(function (state) {\n        return {\n          jugadores: state.jugadores.map(function (j) {\n            return _objectSpread(_objectSpread({}, j), {}, {\n              puntos: 0\n            });\n          }),\n          historial: [],\n          ganador: null\n        };\n      });\n      get().guardarEnStorage();\n    },\n    cambiarLimite: function cambiarLimite(nuevoLimite) {\n      set({\n        limitePuntos: nuevoLimite\n      });\n      get().guardarEnStorage();\n    },\n    verificarGanador: function verificarGanador() {},\n    getJugadoresOrdenados: function getJugadoresOrdenados() {\n      var _get7 = get(),\n        jugadores = _get7.jugadores;\n      return _toConsumableArray(jugadores).sort(function (a, b) {\n        return a.puntos - b.puntos;\n      });\n    },\n    guardarEnStorage: function () {\n      var _guardarEnStorage = _asyncToGenerator(function* () {\n        var state = get();\n        try {\n          yield AsyncStorage.setItem('chinchonState', JSON.stringify({\n            jugadores: state.jugadores,\n            historial: state.historial,\n            limitePuntos: state.limitePuntos,\n            ganador: state.ganador\n          }));\n        } catch (error) {\n          console.error('Error guardando estado de Chinchón:', error);\n        }\n      });\n      function guardarEnStorage() {\n        return _guardarEnStorage.apply(this, arguments);\n      }\n      return guardarEnStorage;\n    }(),\n    cargarDesdeStorage: function () {\n      var _cargarDesdeStorage = _asyncToGenerator(function* () {\n        try {\n          var savedState = yield AsyncStorage.getItem('chinchonState');\n          if (savedState) {\n            var parsedState = JSON.parse(savedState);\n            if (parsedState.ganador && !Array.isArray(parsedState.ganador)) {\n              parsedState.ganador = [parsedState.ganador];\n            }\n            set(parsedState);\n          }\n        } catch (error) {\n          console.error('Error cargando estado de Chinchón:', error);\n        }\n      });\n      function cargarDesdeStorage() {\n        return _cargarDesdeStorage.apply(this, arguments);\n      }\n      return cargarDesdeStorage;\n    }()\n  };\n});","map":{"version":3,"names":["create","AsyncStorage","useChinchonStore","set","get","jugadores","id","nombre","puntos","historial","limitePuntos","ganador","agregarJugador","_get","length","nuevoId","Math","max","apply","_toConsumableArray","map","j","nuevoJugador","state","concat","guardarEnStorage","eliminarJugador","_get2","filter","cambiarNombreJugador","nuevoNombre","_objectSpread","agregarPuntos","_get3","nuevosJugadores","historialActualizado","tipo","jugadorId","alguienPerdio","some","nuevoGanador","lowestScore","min","ganadores","g","chinchon","corte","_get4","_get5","jugadorGanador","find","deshacerUltima","_get6","ultimaAccion","nuevoHistorial","slice","index","findIndex","reiniciarPartida","cambiarLimite","nuevoLimite","verificarGanador","getJugadoresOrdenados","_get7","sort","a","b","_guardarEnStorage","_asyncToGenerator","setItem","JSON","stringify","error","console","arguments","cargarDesdeStorage","_cargarDesdeStorage","savedState","getItem","parsedState","parse","Array","isArray"],"sources":["C:/Users/facun/Desktop/counter/store/chinchonStore.js"],"sourcesContent":["import { create } from 'zustand';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\n\nexport const useChinchonStore = create((set, get) => ({\n  // Estado del juego\n  jugadores: [\n    { id: 1, nombre: 'Jugador 1', puntos: 0 },\n    { id: 2, nombre: 'Jugador 2', puntos: 0 },\n  ],\n  historial: [],\n  limitePuntos: 100,\n  ganador: null,\n\n  // Acciones para jugadores\n  agregarJugador: () => {\n    const { jugadores } = get();\n    if (jugadores.length < 6) {\n      const nuevoId = Math.max(...jugadores.map(j => j.id)) + 1;\n      const nuevoJugador = {\n        id: nuevoId,\n        nombre: `Jugador ${nuevoId}`,\n        puntos: 0\n      };\n      \n      set(state => ({\n        jugadores: [...state.jugadores, nuevoJugador]\n      }));\n      get().guardarEnStorage();\n    }\n  },\n\n  eliminarJugador: (id) => {\n    const { jugadores } = get();\n    if (jugadores.length > 2) {\n      set(state => ({\n        jugadores: state.jugadores.filter(j => j.id !== id)\n      }));\n      get().guardarEnStorage();\n    }\n  },\n\n  cambiarNombreJugador: (id, nuevoNombre) => {\n    set(state => ({\n      jugadores: state.jugadores.map(j => \n        j.id === id ? { ...j, nombre: nuevoNombre } : j\n      )\n    }));\n    get().guardarEnStorage();\n  },\n\n  // Acciones de puntuación\n  agregarPuntos: (id, puntos) => {\n    const { ganador } = get();\n    if (ganador && ganador.length > 0) return;\n\n    set(state => {\n      const nuevosJugadores = state.jugadores.map(j =>\n        j.id === id ? { ...j, puntos: j.puntos + puntos } : j\n      );\n\n      const historialActualizado = [\n        ...state.historial, \n        { tipo: 'agregarPuntos', jugadorId: id, puntos: puntos }\n      ];\n      \n      const alguienPerdio = nuevosJugadores.some(j => j.puntos > state.limitePuntos);\n      let nuevoGanador = state.ganador;\n\n      if (alguienPerdio && !state.ganador) {\n        const lowestScore = Math.min(...nuevosJugadores.map(j => j.puntos));\n        const ganadores = nuevosJugadores\n          .filter(j => j.puntos === lowestScore)\n          .map(g => ({ ...g, chinchon: false }));\n        \n        nuevoGanador = ganadores;\n      }\n\n      return { \n        jugadores: nuevosJugadores,\n        historial: historialActualizado,\n        ganador: nuevoGanador \n      };\n    });\n\n    get().guardarEnStorage();\n  },\n\n  corte: (id) => {\n    const { ganador } = get();\n    if (ganador) return;\n\n    set(state => {\n      const nuevosJugadores = state.jugadores.map(j =>\n        j.id === id ? { ...j, puntos: Math.max(0, j.puntos - 10) } : j // Evitar puntos negativos\n      );\n\n      const historialActualizado = [\n        ...state.historial, \n        { tipo: 'corte', jugadorId: id }\n      ];\n\n      // No se verifica ganador en un corte, solo se actualizan puntos.\n      return { \n        jugadores: nuevosJugadores,\n        historial: historialActualizado \n      };\n    });\n\n    get().guardarEnStorage();\n  },\n\n  chinchon: (id) => {\n    const { jugadores, ganador } = get();\n    if (ganador && ganador.length > 0) return;\n\n    const jugadorGanador = jugadores.find(j => j.id === id);\n    if (jugadorGanador) {\n      set({ ganador: [{ ...jugadorGanador, chinchon: true }] });\n      get().guardarEnStorage();\n    }\n  },\n\n  deshacerUltima: () => {\n    const { historial, jugadores } = get();\n    if (historial.length === 0) return;\n\n    const ultimaAccion = historial[historial.length - 1];\n    const nuevoHistorial = historial.slice(0, -1);\n\n    if (ultimaAccion.tipo === 'chinchon') {\n      set({ historial: nuevoHistorial, ganador: null });\n      get().guardarEnStorage();\n      return; \n    }\n\n    set(state => {\n      const nuevosJugadores = [...state.jugadores];\n      const index = nuevosJugadores.findIndex(j => j.id === ultimaAccion.jugadorId);\n\n      if (index !== -1) {\n        if (ultimaAccion.tipo === 'agregarPuntos') {\n          nuevosJugadores[index] = {\n            ...nuevosJugadores[index],\n            puntos: nuevosJugadores[index].puntos - ultimaAccion.puntos,\n          };\n        } else if (ultimaAccion.tipo === 'corte') {\n          nuevosJugadores[index] = {\n            ...nuevosJugadores[index],\n            puntos: nuevosJugadores[index].puntos + 10,\n          };\n        }\n      }\n      \n      return { \n        jugadores: nuevosJugadores, \n        historial: nuevoHistorial, \n        ganador: null \n      };\n    });\n\n    get().guardarEnStorage();\n  },\n\n  reiniciarPartida: () => {\n    set(state => ({\n      jugadores: state.jugadores.map(j => ({ ...j, puntos: 0 })),\n      historial: [],\n      ganador: null\n    }));\n    get().guardarEnStorage();\n  },\n\n  cambiarLimite: (nuevoLimite) => {\n    set({ limitePuntos: nuevoLimite });\n    get().guardarEnStorage();\n  },\n\n  // Verificar ganador (YA NO SE USA DIRECTAMENTE, la lógica se movió)\n  verificarGanador: () => {\n    // Esta función ahora está vacía o puede ser eliminada,\n    // ya que su lógica se ha integrado en agregarPuntos.\n  },\n\n  // Obtener jugadores ordenados por puntos (menor a mayor)\n  getJugadoresOrdenados: () => {\n    const { jugadores } = get();\n    return [...jugadores].sort((a, b) => a.puntos - b.puntos);\n  },\n\n  // Persistencia\n  guardarEnStorage: async () => {\n    const state = get();\n    try {\n      await AsyncStorage.setItem('chinchonState', JSON.stringify({\n        jugadores: state.jugadores,\n        historial: state.historial,\n        limitePuntos: state.limitePuntos,\n        ganador: state.ganador\n      }));\n    } catch (error) {\n      console.error('Error guardando estado de Chinchón:', error);\n    }\n  },\n\n  cargarDesdeStorage: async () => {\n    try {\n      const savedState = await AsyncStorage.getItem('chinchonState');\n      if (savedState) {\n        const parsedState = JSON.parse(savedState);\n        \n        // Migración para el estado de 'ganador'\n        if (parsedState.ganador && !Array.isArray(parsedState.ganador)) {\n          // Si 'ganador' existe pero no es un array, es el formato antiguo.\n          // Lo convertimos a un array para que sea compatible.\n          parsedState.ganador = [parsedState.ganador];\n        }\n\n        set(parsedState);\n      }\n    } catch (error) {\n      console.error('Error cargando estado de Chinchón:', error);\n    }\n  }\n})); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}